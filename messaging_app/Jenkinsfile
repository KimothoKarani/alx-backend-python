pipeline {
  agent any
  options {
    // Jenkins will do the checkout since this job is "Pipeline script from SCM"
    skipDefaultCheckout(false)
    timestamps()
  }

  environment {
    DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
    PIP_CACHE_DIR = "${WORKSPACE}/.pip-cache"
  }

  stages {
    stage('Sanity') {
      steps {
        sh 'pwd && ls -la'
        dir('messaging_app') { sh 'ls -la' }
      }
    }

    stage('Lint & Test (Docker)') {
      agent { docker { image 'kimothokarani25/python:3.12-git' } }
      steps {
        dir('messaging_app') {
          sh '''
            set -euxo pipefail
            python --version
            pip install --upgrade pip

            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            else
              echo "No requirements.txt; installing minimal test deps"
              pip install pytest pytest-cov flake8
            fi

            # Lint (non-blocking)
            if ! python -c "import flake8" >/dev/null 2>&1; then pip install flake8; fi
            flake8 . || true

            # Tests + coverage if available
            if python -c "import pytest_cov" >/dev/null 2>&1; then
              pytest -q --junitxml=test-results.xml --cov=. --cov-report=xml
            else
              pytest -q --junitxml=test-results.xml || true
            fi
          '''
        }
      }
      post {
        always {
          dir('messaging_app') {
            junit allowEmptyResults: true, testResults: 'test-results.xml'
            archiveArtifacts artifacts: 'coverage.xml', allowEmptyArchive: true, onlyIfSuccessful: false
          }
        }
      }
    }
  }
}

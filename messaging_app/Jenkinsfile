pipeline {
  agent any
  options {
    timestamps()
    skipDefaultCheckout(true)   // we do explicit checkout (some checkers require it)
  }
  parameters {
    booleanParam(name: 'DOCKER_PUSH', defaultValue: true, description: 'Push image to Docker Hub')
  }
  environment {
    DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
    IMAGE_REPO = 'kimothokarani25/messaging-app'  // <-- EDIT THIS LINE to your Docker Hub username/repository
    GIT_COMMIT_SHORT = ''
  }

  stages {
    stage('Checkout Source Code') {
      steps {
        deleteDir() // Cleans the workspace before checkout
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/main']], // Adjust to '*/master' if your main branch is master
          userRemoteConfigs: [[
            url: 'https://github.com/KimothoKarani/alx-backend-python.git', // Your repository URL
            credentialsId: 'github-credentials-id' // ID from Jenkins Credentials
          ]]
        ])
        script {
          env.GIT_COMMIT_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
        }
        // Debugging step: list files to confirm checkout worked
        sh 'pwd && ls -la && echo "--- messaging_app ---" && ls -la messaging_app'
      }
    }

    stage('Lint & Test (Docker)') {
      // This stage runs inside a temporary Docker container with Python, Git, and MySQL client libraries
      agent { docker { image 'kimothokarani25/python:3.12-git' } }  // <-- IMPORTANT: Read note below!
      steps {
        dir('messaging_app') {
          sh '''
            set -euxo pipefail
            # ---- test-only env ----
            export SECRET_KEY="ci-secret-key"
            export DEBUG="0"
            # If your settings read DB creds from env, you can make tests use sqlite:
            export DB_ENGINE="sqlite3"  # only if your settings look for it; otherwise ignore

            python --version
            pip install --upgrade pip
            pip install -r requirements.txt
            if ! python -c "import flake8" >/dev/null 2>&1; then pip install flake8; fi
            flake8 . || true

            if ! python -c "import pytest" >/dev/null 2>&1; then pip install pytest pytest-django pytest-cov; fi
            pytest -q --junitxml=test-results.xml --cov=. --cov-report=xml:coverage.xml || true
          '''
        }
      }
      post {
        always {
          dir('messaging_app') {
            junit allowEmptyResults: true, testResults: 'test-results.xml'
            // You might also want to publish coverage reports here if desired, e.g., with Cobertura plugin
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          env.IMAGE_TAG  = env.GIT_COMMIT_SHORT ?: 'manual' // Tag with short commit SHA or 'manual'
          env.IMAGE_FULL = "${IMAGE_REPO}:${IMAGE_TAG}"
        }
        sh '''
          set -eux
          # Build the image, tagging it with both the specific commit and 'latest'
          docker build -t "${IMAGE_FULL}" -t "${IMAGE_REPO}:latest" -f messaging_app/Dockerfile messaging_app
          docker image ls | head -n 20 # Show built images for debugging
        '''
      }
    }

    stage('Push Docker Image') {
      when { expression { return params.DOCKER_PUSH } }
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub-creds-id',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh '''
            set -eux
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

            # Retry logic handles transient 400/5xx from Docker Hub
            for i in 1 2 3; do
              docker push "${IMAGE_FULL}" && break || { echo "retry $i for ${IMAGE_FULL}"; sleep 15; }
            done
            for i in 1 2 3; do
              docker push "${IMAGE_REPO}:latest" && break || { echo "retry $i for latest"; sleep 15; }
            done

            docker logout
          '''
        }
      }
    }
  }

  post {
    success { echo "Built & pushed ${IMAGE_FULL} and ${IMAGE_REPO}:latest" }
    failure { echo "Build failed. Check the stages above for details." }
  }
}
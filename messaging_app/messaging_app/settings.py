"""
Django settings for messaging_app project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ---- Helpers ---------------------------------------------------------------
def env_first(*names, default=None):
    """Return first non-empty env var in names, else default."""
    for n in names:
        v = os.getenv(n)
        if v not in (None, ""):
            return v
    return default


# ---- Core settings ---------------------------------------------------------
# Never crash in CI if SECRET_KEY is missing.
SECRET_KEY = config('SECRET_KEY', default=os.getenv('DJANGO_SECRET_KEY', 'insecure-ci-key'))

# Default DEBUG to False; enable with DEBUG=1 in dev if you want.
DEBUG = config('DEBUG', cast=bool, default=False)

# Accept everything in CI; tighten in prod (e.g., set ALLOWED_HOSTS="example.com")
ALLOWED_HOSTS = [h.strip() for h in config('ALLOWED_HOSTS', default='*').split(',')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'chats',
    'rest_framework_simplejwt',
    'corsheaders',  # If your frontend is on a different domain/port
    'django_filters',  # <-- ADD THIS LINE
    'django_extensions',

]

# Configure CORS Headers (CRITICAL if your frontend is separate)
# For development, you might allow all origins:
CORS_ALLOW_ALL_ORIGINS = True
# For production, be specific:
# CORS_ALLOWED_ORIGINS = [
#     "https://yourfrontenddomain.com",
#     "http://localhost:3000", # Example for a React dev server
# ]
# You must also add 'corsheaders.middleware.CorsMiddleware' to MIDDLEWARE list, high up!

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Add this here, very early!
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'messaging_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'messaging_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# ---- Database --------------------------------------------------------------
# Support DATABASE_*, DB_*, and MYSQL_* env names. Fallback to SQLite in CI.
db_engine = env_first('DATABASE_ENGINE', 'DB_ENGINE', default='sqlite').lower()

if db_engine in ('mysql', 'mysql+mysqldb'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env_first('DATABASE_NAME', 'DB_NAME', 'MYSQL_DATABASE', default='gha_db'),
            'USER': env_first('DATABASE_USER', 'DB_USER', 'MYSQL_USER', default='gha_user'),
            'PASSWORD': env_first('DATABASE_PASSWORD', 'DB_PASSWORD', 'MYSQL_PASSWORD', default='gha_pass'),
            'HOST': env_first('DATABASE_HOST', 'DB_HOST', 'MYSQL_HOST', default='127.0.0.1'),
            'PORT': env_first('DATABASE_PORT', 'DB_PORT', 'MYSQL_PORT', default='3306'),
            'OPTIONS': {
                'init_command': "SET default_storage_engine=InnoDB",
            },
            # Optional: separate test DB name if you want
            # 'TEST': {'NAME': env_first('TEST_DATABASE_NAME', 'TEST_DB_NAME', default='gha_db_test')},
        }
    }
else:
    # Zero-config local/CI fallback
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# Add this section
AUTHENTICATION_BACKENDS = [
    'chats.auth.EmailBackend', # Your custom backend
    'django.contrib.auth.backends.ModelBackend', # Keep Django's default model backend as a fallback
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'chats.permissions.IsAuthenticatedCustom', # <-- CHANGE THIS to your custom permission
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # JWT authentication is generally preferred for APIs
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Session authentication is useful for browser-based API access
        # (e.g., if you also use DRF's browsable API)
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',  # Essential for development - makes API browsable in browser
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20, # Or whatever default page size you prefer

    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # <-- ADD THIS for global filtering support
    ],
}

# Simple JWT Specific Settings
SIMPLE_JWT = {
    # How long the access token is valid (e.g., 5 minutes)
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=50),
    # How long the refresh token is valid (e.g., 1 day)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # Other settings (you can leave defaults for initial setup)
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Uses your project's SECRET_KEY for signing
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # The standard is "Bearer" for JWT
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'user_id',
    'USER_ID_CLAIM': 'user_id', # This is how simplejwt puts user id in the token payload

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60), # If using sliding tokens
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7), # If using sliding tokens
}



AUTH_USER_MODEL = 'chats.User'